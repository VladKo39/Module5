'''Задача "История строительства":
Для решения этой задачи будем пользоваться решением к предыдущей задаче "Перегрузка операторов".
В классе House создайте атрибут houses_history = [], который будет хранить названия созданных объектов.
Правильней вписывать здание в историю сразу при создании объекта, тем более можно удобно обращаться к атрибутам класса используя ссылку на сам класс - cls.
Дополните метод __new__ так, чтобы:
Название объекта добавлялось в список cls.houses_history.
Название строения можно взять из args по индексу.
Также переопределите метод __del__(self) в котором будет выводиться строка:
"<название> снесён, но он останется в истории"
Создайте несколько объектов класса House и проверьте работу методов __del__ и __new__, а также значение атрибута houses_history.
Пример результата выполнения программы:
Пример выполнения программы:
h1 = House('ЖК Эльбрус', 10)
print(House.houses_history)
h2 = House('ЖК Акация', 20)
print(House.houses_history)
h3 = House('ЖК Матрёшки', 20)
print(House.houses_history)
# Удаление объектов
del h2
del h3
print(House.houses_history)
Вывод на консоль:
['ЖК Эльбрус']
['ЖК Эльбрус', 'ЖК Акация']
['ЖК Эльбрус', 'ЖК Акация', 'ЖК Матрёшки']
ЖК Акация снесён, но он останется в истории
ЖК Матрёшки снесён, но он останется в истории
['ЖК Эльбрус', 'ЖК Акация', 'ЖК Матрёшки']
ЖК Эльбрус снесён, но он останется в истории
Файл module_5_4.py и загрузите его на ваш GitHub репозиторий. В решении пришлите ссылку на него.
'''

class House:
    #Создаю класс House
    houses_history = []
    #Создаю список(атрибут) для хранения созданных объектов
    def __new__(cls, *args, **kwargs):
        # Методом __new__ создаю объект(список) класса House:
        cls.houses_history.append(args[0])
        # в начало списка класса добавляю первое значение из кортежа - name
        return object.__new__(cls)
        # возврат значения name, houses_history
    def __init__(self,name, number_of_floors):
        #Методом __init__ инициализирую атрибуты объекта(переменные) House:
        self.name = name
            #Наименование объекта как name
        self.number_of_floors= number_of_floors
            #Количество этажей как number_of_floors
    def __str__(self):
        # Методом __str__ возврат строки значения houses_history House:
         return f'{self.name},{self.number_of_floors},{self.houses_history}'
         #возврат значения name, houses_history
    def __del__(self):
        # Методом __del__ удаляем name  значения houses_history House:
        #Будет удалять все операторы по окончании модуля, поэтому последняя запись
        #по ЖК Эльбрус
        print(f'{self.name} снесён, но он останется в истории!')


h1 = House('ЖК Эльбрус', 10)
print(House.houses_history)
h2 = House('ЖК Акация', 20)
print(House.houses_history)
h3 = House('ЖК Матрёшки', 20)
print(House.houses_history)
del h2
del h3
print(House.houses_history)
